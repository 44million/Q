// Generated from /Users/harryharbuck-marlowe/Downloads/Q/src/main/java/core/etc/Q.g4 by ANTLR 4.9.2
package core.interp;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class QLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.9.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		Println=18, Async=19, Var=20, Import=21, Print=22, Input=23, Assert=24, 
		Def=25, ToInt=26, If=27, Else=28, Package=29, Return=30, For=31, While=32, 
		To=33, Do=34, End=35, In=36, Null=37, Try=38, Class=39, Const=40, Noval=41, 
		Self=42, Native=43, Or=44, Accessor=45, And=46, Equals=47, NEquals=48, 
		GTEquals=49, LTEquals=50, Pow=51, Excl=52, GT=53, LT=54, Add=55, Subtract=56, 
		Multiply=57, Divide=58, Modulus=59, OBrace=60, CBrace=61, OBracket=62, 
		CBracket=63, OParen=64, CParen=65, SColon=66, Assign=67, Comma=68, QMark=69, 
		Colon=70, Bool=71, Number=72, Identifier=73, String=74, Comment=75, Space=76;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
			"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
			"Println", "Async", "Var", "Import", "Print", "Input", "Assert", "Def", 
			"ToInt", "If", "Else", "Package", "Return", "For", "While", "To", "Do", 
			"End", "In", "Null", "Try", "Class", "Const", "Noval", "Self", "Native", 
			"Or", "Accessor", "And", "Equals", "NEquals", "GTEquals", "LTEquals", 
			"Pow", "Excl", "GT", "LT", "Add", "Subtract", "Multiply", "Divide", "Modulus", 
			"OBrace", "CBrace", "OBracket", "CBracket", "OParen", "CParen", "SColon", 
			"Assign", "Comma", "QMark", "Colon", "Bool", "Number", "Identifier", 
			"String", "Comment", "Space", "Int", "Digit", "ESC", "UNICODE", "HEX"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'.'", "'@'", "'header'", "'cn'", "'new'", "'as'", "'sys'", "'write'", 
			"'verify'", "'range'", "'#'", "'except'", "'render'", "'addComp'", "'changeText'", 
			"'fn main()'", "'random'", null, "'async'", "'var'", "'import'", null, 
			null, "'assert'", "'fn'", "'toInt'", "'if'", "'else'", "'namespace'", 
			"'return'", "'for'", "'while'", "'to'", "'do'", "'end'", "'in'", "'null'", 
			"'try'", "'class'", "'const'", "'noval'", "'self'", "'native'", "'||'", 
			"'::'", "'&&'", "'=='", "'!='", "'>='", "'<='", "'^'", "'!'", "'>'", 
			"'<'", "'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'['", "']'", 
			"'('", "')'", "';'", "'='", "','", "'?'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, "Println", "Async", "Var", "Import", 
			"Print", "Input", "Assert", "Def", "ToInt", "If", "Else", "Package", 
			"Return", "For", "While", "To", "Do", "End", "In", "Null", "Try", "Class", 
			"Const", "Noval", "Self", "Native", "Or", "Accessor", "And", "Equals", 
			"NEquals", "GTEquals", "LTEquals", "Pow", "Excl", "GT", "LT", "Add", 
			"Subtract", "Multiply", "Divide", "Modulus", "OBrace", "CBrace", "OBracket", 
			"CBracket", "OParen", "CParen", "SColon", "Assign", "Comma", "QMark", 
			"Colon", "Bool", "Number", "Identifier", "String", "Comment", "Space"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public QLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Q.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2N\u024d\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\3\2\3\2\3\3"+
		"\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3"+
		"\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16"+
		"\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21"+
		"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32"+
		"\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$"+
		"\3$\3$\3$\3%\3%\3%\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3"+
		")\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3"+
		",\3-\3-\3-\3.\3.\3.\3/\3/\3/\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3"+
		"\62\3\63\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\38\38\39\3"+
		"9\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\3?\3?\3@\3@\3A\3A\3B\3B\3C\3C\3D\3D\3"+
		"E\3E\3F\3F\3G\3G\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u01fd\nH\3I\3I\3I\7I\u0202"+
		"\nI\fI\16I\u0205\13I\5I\u0207\nI\3J\3J\7J\u020b\nJ\fJ\16J\u020e\13J\3"+
		"K\3K\3K\6K\u0213\nK\rK\16K\u0214\3K\3K\3L\3L\3L\3L\7L\u021d\nL\fL\16L"+
		"\u0220\13L\3L\3L\3L\3L\7L\u0226\nL\fL\16L\u0229\13L\3L\3L\5L\u022d\nL"+
		"\3L\3L\3M\3M\3M\3M\3N\3N\7N\u0237\nN\fN\16N\u023a\13N\3N\5N\u023d\nN\3"+
		"O\3O\3P\3P\3P\5P\u0244\nP\3Q\3Q\3Q\3Q\3Q\3Q\3R\3R\3\u0227\2S\3\3\5\4\7"+
		"\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22"+
		"#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C"+
		"#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;u<w"+
		"=y>{?}@\177A\u0081B\u0083C\u0085D\u0087E\u0089F\u008bG\u008dH\u008fI\u0091"+
		"J\u0093K\u0095L\u0097M\u0099N\u009b\2\u009d\2\u009f\2\u00a1\2\u00a3\2"+
		"\3\2\13\5\2C\\aac|\6\2\62;C\\aac|\6\2\f\f\17\17$$^^\4\2\f\f\17\17\5\2"+
		"\13\f\16\17\"\"\3\2\63;\3\2\62;\t\2$$^^ddhhppttvv\5\2\62;CHch\2\u0253"+
		"\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2"+
		"\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2"+
		"\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2"+
		"\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2"+
		"\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3"+
		"\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2"+
		"\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2"+
		"U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3"+
		"\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2"+
		"\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2"+
		"{\3\2\2\2\2}\3\2\2\2\2\177\3\2\2\2\2\u0081\3\2\2\2\2\u0083\3\2\2\2\2\u0085"+
		"\3\2\2\2\2\u0087\3\2\2\2\2\u0089\3\2\2\2\2\u008b\3\2\2\2\2\u008d\3\2\2"+
		"\2\2\u008f\3\2\2\2\2\u0091\3\2\2\2\2\u0093\3\2\2\2\2\u0095\3\2\2\2\2\u0097"+
		"\3\2\2\2\2\u0099\3\2\2\2\3\u00a5\3\2\2\2\5\u00a7\3\2\2\2\7\u00a9\3\2\2"+
		"\2\t\u00b0\3\2\2\2\13\u00b3\3\2\2\2\r\u00b7\3\2\2\2\17\u00ba\3\2\2\2\21"+
		"\u00be\3\2\2\2\23\u00c4\3\2\2\2\25\u00cb\3\2\2\2\27\u00d1\3\2\2\2\31\u00d3"+
		"\3\2\2\2\33\u00da\3\2\2\2\35\u00e1\3\2\2\2\37\u00e9\3\2\2\2!\u00f4\3\2"+
		"\2\2#\u00fe\3\2\2\2%\u0105\3\2\2\2\'\u011d\3\2\2\2)\u0123\3\2\2\2+\u0127"+
		"\3\2\2\2-\u012e\3\2\2\2/\u0146\3\2\2\2\61\u014f\3\2\2\2\63\u0156\3\2\2"+
		"\2\65\u0159\3\2\2\2\67\u015f\3\2\2\29\u0162\3\2\2\2;\u0167\3\2\2\2=\u0171"+
		"\3\2\2\2?\u0178\3\2\2\2A\u017c\3\2\2\2C\u0182\3\2\2\2E\u0185\3\2\2\2G"+
		"\u0188\3\2\2\2I\u018c\3\2\2\2K\u018f\3\2\2\2M\u0194\3\2\2\2O\u0198\3\2"+
		"\2\2Q\u019e\3\2\2\2S\u01a4\3\2\2\2U\u01aa\3\2\2\2W\u01af\3\2\2\2Y\u01b6"+
		"\3\2\2\2[\u01b9\3\2\2\2]\u01bc\3\2\2\2_\u01bf\3\2\2\2a\u01c2\3\2\2\2c"+
		"\u01c5\3\2\2\2e\u01c8\3\2\2\2g\u01cb\3\2\2\2i\u01cd\3\2\2\2k\u01cf\3\2"+
		"\2\2m\u01d1\3\2\2\2o\u01d3\3\2\2\2q\u01d5\3\2\2\2s\u01d7\3\2\2\2u\u01d9"+
		"\3\2\2\2w\u01db\3\2\2\2y\u01dd\3\2\2\2{\u01df\3\2\2\2}\u01e1\3\2\2\2\177"+
		"\u01e3\3\2\2\2\u0081\u01e5\3\2\2\2\u0083\u01e7\3\2\2\2\u0085\u01e9\3\2"+
		"\2\2\u0087\u01eb\3\2\2\2\u0089\u01ed\3\2\2\2\u008b\u01ef\3\2\2\2\u008d"+
		"\u01f1\3\2\2\2\u008f\u01fc\3\2\2\2\u0091\u01fe\3\2\2\2\u0093\u0208\3\2"+
		"\2\2\u0095\u020f\3\2\2\2\u0097\u022c\3\2\2\2\u0099\u0230\3\2\2\2\u009b"+
		"\u023c\3\2\2\2\u009d\u023e\3\2\2\2\u009f\u0240\3\2\2\2\u00a1\u0245\3\2"+
		"\2\2\u00a3\u024b\3\2\2\2\u00a5\u00a6\7\60\2\2\u00a6\4\3\2\2\2\u00a7\u00a8"+
		"\7B\2\2\u00a8\6\3\2\2\2\u00a9\u00aa\7j\2\2\u00aa\u00ab\7g\2\2\u00ab\u00ac"+
		"\7c\2\2\u00ac\u00ad\7f\2\2\u00ad\u00ae\7g\2\2\u00ae\u00af\7t\2\2\u00af"+
		"\b\3\2\2\2\u00b0\u00b1\7e\2\2\u00b1\u00b2\7p\2\2\u00b2\n\3\2\2\2\u00b3"+
		"\u00b4\7p\2\2\u00b4\u00b5\7g\2\2\u00b5\u00b6\7y\2\2\u00b6\f\3\2\2\2\u00b7"+
		"\u00b8\7c\2\2\u00b8\u00b9\7u\2\2\u00b9\16\3\2\2\2\u00ba\u00bb\7u\2\2\u00bb"+
		"\u00bc\7{\2\2\u00bc\u00bd\7u\2\2\u00bd\20\3\2\2\2\u00be\u00bf\7y\2\2\u00bf"+
		"\u00c0\7t\2\2\u00c0\u00c1\7k\2\2\u00c1\u00c2\7v\2\2\u00c2\u00c3\7g\2\2"+
		"\u00c3\22\3\2\2\2\u00c4\u00c5\7x\2\2\u00c5\u00c6\7g\2\2\u00c6\u00c7\7"+
		"t\2\2\u00c7\u00c8\7k\2\2\u00c8\u00c9\7h\2\2\u00c9\u00ca\7{\2\2\u00ca\24"+
		"\3\2\2\2\u00cb\u00cc\7t\2\2\u00cc\u00cd\7c\2\2\u00cd\u00ce\7p\2\2\u00ce"+
		"\u00cf\7i\2\2\u00cf\u00d0\7g\2\2\u00d0\26\3\2\2\2\u00d1\u00d2\7%\2\2\u00d2"+
		"\30\3\2\2\2\u00d3\u00d4\7g\2\2\u00d4\u00d5\7z\2\2\u00d5\u00d6\7e\2\2\u00d6"+
		"\u00d7\7g\2\2\u00d7\u00d8\7r\2\2\u00d8\u00d9\7v\2\2\u00d9\32\3\2\2\2\u00da"+
		"\u00db\7t\2\2\u00db\u00dc\7g\2\2\u00dc\u00dd\7p\2\2\u00dd\u00de\7f\2\2"+
		"\u00de\u00df\7g\2\2\u00df\u00e0\7t\2\2\u00e0\34\3\2\2\2\u00e1\u00e2\7"+
		"c\2\2\u00e2\u00e3\7f\2\2\u00e3\u00e4\7f\2\2\u00e4\u00e5\7E\2\2\u00e5\u00e6"+
		"\7q\2\2\u00e6\u00e7\7o\2\2\u00e7\u00e8\7r\2\2\u00e8\36\3\2\2\2\u00e9\u00ea"+
		"\7e\2\2\u00ea\u00eb\7j\2\2\u00eb\u00ec\7c\2\2\u00ec\u00ed\7p\2\2\u00ed"+
		"\u00ee\7i\2\2\u00ee\u00ef\7g\2\2\u00ef\u00f0\7V\2\2\u00f0\u00f1\7g\2\2"+
		"\u00f1\u00f2\7z\2\2\u00f2\u00f3\7v\2\2\u00f3 \3\2\2\2\u00f4\u00f5\7h\2"+
		"\2\u00f5\u00f6\7p\2\2\u00f6\u00f7\7\"\2\2\u00f7\u00f8\7o\2\2\u00f8\u00f9"+
		"\7c\2\2\u00f9\u00fa\7k\2\2\u00fa\u00fb\7p\2\2\u00fb\u00fc\7*\2\2\u00fc"+
		"\u00fd\7+\2\2\u00fd\"\3\2\2\2\u00fe\u00ff\7t\2\2\u00ff\u0100\7c\2\2\u0100"+
		"\u0101\7p\2\2\u0101\u0102\7f\2\2\u0102\u0103\7q\2\2\u0103\u0104\7o\2\2"+
		"\u0104$\3\2\2\2\u0105\u0106\7u\2\2\u0106\u0107\7v\2\2\u0107\u0108\7f\2"+
		"\2\u0108\u0109\3\2\2\2\u0109\u010a\5[.\2\u010a\u010b\7S\2\2\u010b\u010c"+
		"\7C\2\2\u010c\u010d\7X\2\2\u010d\u010e\7D\2\2\u010e\u010f\7:\2\2\u010f"+
		"\u0110\7M\2\2\u0110\u0111\7K\2\2\u0111\u0112\79\2\2\u0112\u0113\7\64\2"+
		"\2\u0113\u0114\7L\2\2\u0114\u0115\78\2\2\u0115\u0116\7\67\2\2\u0116\u0117"+
		"\7;\2\2\u0117\u0118\7\63\2\2\u0118\u0119\7;\2\2\u0119\u011a\7[\2\2\u011a"+
		"\u011b\7N\2\2\u011b\u011c\7E\2\2\u011c&\3\2\2\2\u011d\u011e\7c\2\2\u011e"+
		"\u011f\7u\2\2\u011f\u0120\7{\2\2\u0120\u0121\7p\2\2\u0121\u0122\7e\2\2"+
		"\u0122(\3\2\2\2\u0123\u0124\7x\2\2\u0124\u0125\7c\2\2\u0125\u0126\7t\2"+
		"\2\u0126*\3\2\2\2\u0127\u0128\7k\2\2\u0128\u0129\7o\2\2\u0129\u012a\7"+
		"r\2\2\u012a\u012b\7q\2\2\u012b\u012c\7t\2\2\u012c\u012d\7v\2\2\u012d,"+
		"\3\2\2\2\u012e\u012f\7u\2\2\u012f\u0130\7v\2\2\u0130\u0131\7f\2\2\u0131"+
		"\u0132\3\2\2\2\u0132\u0133\5[.\2\u0133\u0134\7C\2\2\u0134\u0135\7Z\2\2"+
		"\u0135\u0136\79\2\2\u0136\u0137\7O\2\2\u0137\u0138\7T\2\2\u0138\u0139"+
		"\7U\2\2\u0139\u013a\7W\2\2\u013a\u013b\7Z\2\2\u013b\u013c\7S\2\2\u013c"+
		"\u013d\78\2\2\u013d\u013e\7\63\2\2\u013e\u013f\7I\2\2\u013f\u0140\7:\2"+
		"\2\u0140\u0141\7F\2\2\u0141\u0142\7Z\2\2\u0142\u0143\7K\2\2\u0143\u0144"+
		"\7\\\2\2\u0144\u0145\7Y\2\2\u0145.\3\2\2\2\u0146\u0147\7u\2\2\u0147\u0148"+
		"\7v\2\2\u0148\u0149\7f\2\2\u0149\u014a\3\2\2\2\u014a\u014b\5[.\2\u014b"+
		"\u014c\7e\2\2\u014c\u014d\7k\2\2\u014d\u014e\7p\2\2\u014e\60\3\2\2\2\u014f"+
		"\u0150\7c\2\2\u0150\u0151\7u\2\2\u0151\u0152\7u\2\2\u0152\u0153\7g\2\2"+
		"\u0153\u0154\7t\2\2\u0154\u0155\7v\2\2\u0155\62\3\2\2\2\u0156\u0157\7"+
		"h\2\2\u0157\u0158\7p\2\2\u0158\64\3\2\2\2\u0159\u015a\7v\2\2\u015a\u015b"+
		"\7q\2\2\u015b\u015c\7K\2\2\u015c\u015d\7p\2\2\u015d\u015e\7v\2\2\u015e"+
		"\66\3\2\2\2\u015f\u0160\7k\2\2\u0160\u0161\7h\2\2\u01618\3\2\2\2\u0162"+
		"\u0163\7g\2\2\u0163\u0164\7n\2\2\u0164\u0165\7u\2\2\u0165\u0166\7g\2\2"+
		"\u0166:\3\2\2\2\u0167\u0168\7p\2\2\u0168\u0169\7c\2\2\u0169\u016a\7o\2"+
		"\2\u016a\u016b\7g\2\2\u016b\u016c\7u\2\2\u016c\u016d\7r\2\2\u016d\u016e"+
		"\7c\2\2\u016e\u016f\7e\2\2\u016f\u0170\7g\2\2\u0170<\3\2\2\2\u0171\u0172"+
		"\7t\2\2\u0172\u0173\7g\2\2\u0173\u0174\7v\2\2\u0174\u0175\7w\2\2\u0175"+
		"\u0176\7t\2\2\u0176\u0177\7p\2\2\u0177>\3\2\2\2\u0178\u0179\7h\2\2\u0179"+
		"\u017a\7q\2\2\u017a\u017b\7t\2\2\u017b@\3\2\2\2\u017c\u017d\7y\2\2\u017d"+
		"\u017e\7j\2\2\u017e\u017f\7k\2\2\u017f\u0180\7n\2\2\u0180\u0181\7g\2\2"+
		"\u0181B\3\2\2\2\u0182\u0183\7v\2\2\u0183\u0184\7q\2\2\u0184D\3\2\2\2\u0185"+
		"\u0186\7f\2\2\u0186\u0187\7q\2\2\u0187F\3\2\2\2\u0188\u0189\7g\2\2\u0189"+
		"\u018a\7p\2\2\u018a\u018b\7f\2\2\u018bH\3\2\2\2\u018c\u018d\7k\2\2\u018d"+
		"\u018e\7p\2\2\u018eJ\3\2\2\2\u018f\u0190\7p\2\2\u0190\u0191\7w\2\2\u0191"+
		"\u0192\7n\2\2\u0192\u0193\7n\2\2\u0193L\3\2\2\2\u0194\u0195\7v\2\2\u0195"+
		"\u0196\7t\2\2\u0196\u0197\7{\2\2\u0197N\3\2\2\2\u0198\u0199\7e\2\2\u0199"+
		"\u019a\7n\2\2\u019a\u019b\7c\2\2\u019b\u019c\7u\2\2\u019c\u019d\7u\2\2"+
		"\u019dP\3\2\2\2\u019e\u019f\7e\2\2\u019f\u01a0\7q\2\2\u01a0\u01a1\7p\2"+
		"\2\u01a1\u01a2\7u\2\2\u01a2\u01a3\7v\2\2\u01a3R\3\2\2\2\u01a4\u01a5\7"+
		"p\2\2\u01a5\u01a6\7q\2\2\u01a6\u01a7\7x\2\2\u01a7\u01a8\7c\2\2\u01a8\u01a9"+
		"\7n\2\2\u01a9T\3\2\2\2\u01aa\u01ab\7u\2\2\u01ab\u01ac\7g\2\2\u01ac\u01ad"+
		"\7n\2\2\u01ad\u01ae\7h\2\2\u01aeV\3\2\2\2\u01af\u01b0\7p\2\2\u01b0\u01b1"+
		"\7c\2\2\u01b1\u01b2\7v\2\2\u01b2\u01b3\7k\2\2\u01b3\u01b4\7x\2\2\u01b4"+
		"\u01b5\7g\2\2\u01b5X\3\2\2\2\u01b6\u01b7\7~\2\2\u01b7\u01b8\7~\2\2\u01b8"+
		"Z\3\2\2\2\u01b9\u01ba\7<\2\2\u01ba\u01bb\7<\2\2\u01bb\\\3\2\2\2\u01bc"+
		"\u01bd\7(\2\2\u01bd\u01be\7(\2\2\u01be^\3\2\2\2\u01bf\u01c0\7?\2\2\u01c0"+
		"\u01c1\7?\2\2\u01c1`\3\2\2\2\u01c2\u01c3\7#\2\2\u01c3\u01c4\7?\2\2\u01c4"+
		"b\3\2\2\2\u01c5\u01c6\7@\2\2\u01c6\u01c7\7?\2\2\u01c7d\3\2\2\2\u01c8\u01c9"+
		"\7>\2\2\u01c9\u01ca\7?\2\2\u01caf\3\2\2\2\u01cb\u01cc\7`\2\2\u01cch\3"+
		"\2\2\2\u01cd\u01ce\7#\2\2\u01cej\3\2\2\2\u01cf\u01d0\7@\2\2\u01d0l\3\2"+
		"\2\2\u01d1\u01d2\7>\2\2\u01d2n\3\2\2\2\u01d3\u01d4\7-\2\2\u01d4p\3\2\2"+
		"\2\u01d5\u01d6\7/\2\2\u01d6r\3\2\2\2\u01d7\u01d8\7,\2\2\u01d8t\3\2\2\2"+
		"\u01d9\u01da\7\61\2\2\u01dav\3\2\2\2\u01db\u01dc\7\'\2\2\u01dcx\3\2\2"+
		"\2\u01dd\u01de\7}\2\2\u01dez\3\2\2\2\u01df\u01e0\7\177\2\2\u01e0|\3\2"+
		"\2\2\u01e1\u01e2\7]\2\2\u01e2~\3\2\2\2\u01e3\u01e4\7_\2\2\u01e4\u0080"+
		"\3\2\2\2\u01e5\u01e6\7*\2\2\u01e6\u0082\3\2\2\2\u01e7\u01e8\7+\2\2\u01e8"+
		"\u0084\3\2\2\2\u01e9\u01ea\7=\2\2\u01ea\u0086\3\2\2\2\u01eb\u01ec\7?\2"+
		"\2\u01ec\u0088\3\2\2\2\u01ed\u01ee\7.\2\2\u01ee\u008a\3\2\2\2\u01ef\u01f0"+
		"\7A\2\2\u01f0\u008c\3\2\2\2\u01f1\u01f2\7<\2\2\u01f2\u008e\3\2\2\2\u01f3"+
		"\u01f4\7v\2\2\u01f4\u01f5\7t\2\2\u01f5\u01f6\7w\2\2\u01f6\u01fd\7g\2\2"+
		"\u01f7\u01f8\7h\2\2\u01f8\u01f9\7c\2\2\u01f9\u01fa\7n\2\2\u01fa\u01fb"+
		"\7u\2\2\u01fb\u01fd\7g\2\2\u01fc\u01f3\3\2\2\2\u01fc\u01f7\3\2\2\2\u01fd"+
		"\u0090\3\2\2\2\u01fe\u0206\5\u009bN\2\u01ff\u0203\7\60\2\2\u0200\u0202"+
		"\5\u009dO\2\u0201\u0200\3\2\2\2\u0202\u0205\3\2\2\2\u0203\u0201\3\2\2"+
		"\2\u0203\u0204\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203\3\2\2\2\u0206\u01ff"+
		"\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0092\3\2\2\2\u0208\u020c\t\2\2\2\u0209"+
		"\u020b\t\3\2\2\u020a\u0209\3\2\2\2\u020b\u020e\3\2\2\2\u020c\u020a\3\2"+
		"\2\2\u020c\u020d\3\2\2\2\u020d\u0094\3\2\2\2\u020e\u020c\3\2\2\2\u020f"+
		"\u0212\7$\2\2\u0210\u0213\5\u009fP\2\u0211\u0213\n\4\2\2\u0212\u0210\3"+
		"\2\2\2\u0212\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0212\3\2\2\2\u0214"+
		"\u0215\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0217\7$\2\2\u0217\u0096\3\2"+
		"\2\2\u0218\u0219\7\61\2\2\u0219\u021a\7\61\2\2\u021a\u021e\3\2\2\2\u021b"+
		"\u021d\n\5\2\2\u021c\u021b\3\2\2\2\u021d\u0220\3\2\2\2\u021e\u021c\3\2"+
		"\2\2\u021e\u021f\3\2\2\2\u021f\u022d\3\2\2\2\u0220\u021e\3\2\2\2\u0221"+
		"\u0222\7\61\2\2\u0222\u0223\7,\2\2\u0223\u0227\3\2\2\2\u0224\u0226\13"+
		"\2\2\2\u0225\u0224\3\2\2\2\u0226\u0229\3\2\2\2\u0227\u0228\3\2\2\2\u0227"+
		"\u0225\3\2\2\2\u0228\u022a\3\2\2\2\u0229\u0227\3\2\2\2\u022a\u022b\7,"+
		"\2\2\u022b\u022d\7\61\2\2\u022c\u0218\3\2\2\2\u022c\u0221\3\2\2\2\u022d"+
		"\u022e\3\2\2\2\u022e\u022f\bL\2\2\u022f\u0098\3\2\2\2\u0230\u0231\t\6"+
		"\2\2\u0231\u0232\3\2\2\2\u0232\u0233\bM\2\2\u0233\u009a\3\2\2\2\u0234"+
		"\u0238\t\7\2\2\u0235\u0237\5\u009dO\2\u0236\u0235\3\2\2\2\u0237\u023a"+
		"\3\2\2\2\u0238\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023d\3\2\2\2\u023a"+
		"\u0238\3\2\2\2\u023b\u023d\7\62\2\2\u023c\u0234\3\2\2\2\u023c\u023b\3"+
		"\2\2\2\u023d\u009c\3\2\2\2\u023e\u023f\t\b\2\2\u023f\u009e\3\2\2\2\u0240"+
		"\u0243\7^\2\2\u0241\u0244\t\t\2\2\u0242\u0244\5\u00a1Q\2\u0243\u0241\3"+
		"\2\2\2\u0243\u0242\3\2\2\2\u0244\u00a0\3\2\2\2\u0245\u0246\7w\2\2\u0246"+
		"\u0247\5\u00a3R\2\u0247\u0248\5\u00a3R\2\u0248\u0249\5\u00a3R\2\u0249"+
		"\u024a\5\u00a3R\2\u024a\u00a2\3\2\2\2\u024b\u024c\t\n\2\2\u024c\u00a4"+
		"\3\2\2\2\17\2\u01fc\u0203\u0206\u020c\u0212\u0214\u021e\u0227\u022c\u0238"+
		"\u023c\u0243\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}