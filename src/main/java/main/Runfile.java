package main;

import org.jetbrains.annotations.NotNull;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import qlang.core.internal.*;
import qlang.core.lang.NativeFunctionLoader;
import qlang.core.lang.Q.QFile;
import qlang.core.lang.Visitor;
import qlang.runtime.errors.Problem;

import java.io.*;
import java.util.HashMap;

/**
 * The main file which contains the CLI flags, global ENV variables, and runs the project!
 */
public class Runfile {

    public static QFile mainFile;

    public static void main(String @NotNull [] args) {

        Environment.args = args;

        new NativeFunctionLoader().registerNatives();

        Scope baseScope = new Scope(null, false);
        Visitor globalScope = new Visitor(baseScope, new HashMap<>());
        Environment env = new Environment();
        String fpath = "src/main/QFiles/Main.q";

        CommandLine cli = new CommandLine();
        fpath = cli.exec(args, fpath);

        mainFile = new QFile(globalScope, env, fpath, Environment.global.parser);
        mainFile.execute();

    }

    @NotNull
    protected static FileWriter getFileWriter(File project, String projectName) throws IOException {
        FileWriter pro = new FileWriter(project);
        pro.write(projectName);
        return pro;
    }

    /**
     * This method returns a new FileWriter with the project's file structure, generated by the CompilerFileTree class
     *
     * @param f                 The input file.
     * @return                  Returns the filewriter in question
     * @throws IOException      Throws an IOException in case a file, or folder cannot be found.
     */
    @NotNull
    protected static FileWriter getFileWriter(File f) throws IOException {
        return getFileWriter(f, """
                /qlang::Folder 611.1 kB
                ├─ /core::Folder 584.1 kB
                │  ├─ /internal::Folder 37.4 kB
                │  │  ├─ CompilerFileTree::JavaFile 4.0 kB
                │  │  ├─ Environment::JavaFile 2.7 kB
                │  │  ├─ NameSpace::JavaFile 381 B
                │  │  ├─ Parser::JavaFile 14.9 kB
                │  │  ├─ Q::LexFile 7.0 kB
                │  │  └─ Scope::JavaFile 2.3 kB
                │  ├─ /interp::Folder 412.8 kB
                │  │  ├─ Q::InterpreterFile 20.4 kB
                │  │  ├─ Q::TokenInputFile 1.2 kB
                │  │  ├─ QBaseListener::JavaFile 28.7 kB
                │  │  ├─ QBaseVisitor::JavaFile 21.1 kB
                │  │  ├─ QLexer::InterpreterFile 21.5 kB
                │  │  ├─ QLexer::JavaFile 43.7 kB
                │  │  ├─ QLexer::TokenInputFile 1.2 kB
                │  │  ├─ QListener::JavaFile 31.3 kB
                │  │  ├─ QParser::JavaFile 225.4 kB
                │  │  ├─ QVisitor::JavaFile 18.2 kB
                │  │  └─ README.md 103 B
                │  ├─ /lang::Folder 127.7 kB
                │  │  ├─ /Q::Folder 9.2 kB
                │  │  │  ├─ QClass::JavaFile 2.7 kB
                │  │  │  ├─ QFile::JavaFile 3.2 kB
                │  │  │  └─ Value::JavaFile 3.3 kB
                │  │  ├─ Function::JavaFile 5.7 kB
                │  │  ├─ NativeFunctionLoader::JavaFile 27.8 kB
                │  │  ├─ Util::JavaFile 15.7 kB
                │  │  └─ Visitor::JavaFile 69.3 kB
                ├─ /runtime::Folder 20.8 kB
                │  ├─ /errors::Folder 2.0 kB
                │  │  ├─ Problem::JavaFile 1.4 kB
                │  │  ├─ RVal::JavaFile 160 B
                │  │  └─ Tip::JavaFile 416 B
                │  └─ /libs::Folder 18.8 kB
                │     ├─ /AWT::Folder 1.8 kB
                │     │  └─ AWT::JavaFile 1.8 kB
                │     ├─ /util::Folder 4.6 kB
                │     │  ├─ HTTP::JavaFile 4.3 kB
                │     │  └─ QLibrary::JavaFile 291 B
                │     ├─ Files::JavaFile 2.2 kB
                │     ├─ Math::JavaFile 3.2 kB
                │     ├─ OS::JavaFile 1.1 kB
                │     ├─ QRandom::JavaFile 793 B
                │     ├─ Qio::JavaFile 1.8 kB
                │     ├─ Time::JavaFile 1.9 kB
                │     └─ WebServer::JavaFile 1.5 kB""");
    }

    /**
     *
     * @param projectName       Name of the project.
     * @return                  The Printer UFile.
     */
    @NotNull
    protected static File getFile(String projectName) {
        File printer = new File(projectName + "/src/objs/Printer.u");

        if (!new File(projectName + "/src/objs/").exists()) {
            new File(projectName + "/src/objs/").mkdirs();
        }

        if (!printer.exists()) {
            try {
                printer.createNewFile();
            } catch (IOException e) {
                throw new Problem(e);
            }
        }
        return printer;
    }

    /**
     *
     * @param yamlfile          The YAML file to read from.
     * @param projectFolder     The main folder for the project.
     * @return infoString       The String to return
     * @throws FileNotFoundException    Throws a file not found exception in case the Q project doesn't have a YAML file, or if it was moved.
     */
    protected static String getYamlInfo(File yamlfile, File projectFolder) throws FileNotFoundException {
        InputStream inputStream = new FileInputStream(yamlfile);
        Yaml yaml = new Yaml(new Constructor(QYaml.class));

        QYaml qy = yaml.load(inputStream);

        return String.format("""
                Information about: %s
                    This project was written by: %s
                    Project size is %smb (%skb)
                    Project version is %s
                    The main file for this project is: %s
                    This is a %s project.
                """, qy.getName(), qy.getAuthor(), "" + ((projectFolder.length() / 1024) / 1024), (projectFolder.length() / 1024), qy.getVersion(), qy.getHomedir(), qy.getType());
    }
}
